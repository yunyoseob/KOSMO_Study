-- UNION : 합집합, 중복 미포함
SELECT DEPTNO FROM EMP
UNION
SELECT DEPTNO FROM DEPT;

SELECT DEPTNO, ENAME FROM EMP
UNION
SELECT DEPTNO, DNAME FROM DEPT;

SELECT 1, 2 FROM EMP;

SELECT DEPTNO, ENAME, 1 FROM EMP
UNION
SELECT DEPTNO, 1,   DNAME FROM DEPT;

SELECT DEPTNO, ENAME, '1' FROM EMP
UNION
SELECT DEPTNO, '1',   DNAME FROM DEPT;

SELECT DEPTNO, ENAME, NULL FROM EMP
UNION
SELECT DEPTNO, NULL,   DNAME FROM DEPT;

SELECT DEPTNO, ENAME,  'DNAME' FROM EMP
UNION
SELECT DEPTNO, 'ENAME', DNAME FROM DEPT;

DESC EMP;
DESC DEPT;

-- UNION ALL : 중복포함 합집합
SELECT DEPTNO FROM EMP
UNION ALL
SELECT DEPTNO FROM DEPT;

SELECT DEPTNO, ENAME FROM EMP
UNION ALL
SELECT DEPTNO, DNAME FROM DEPT;

-- MINUS : 차집합
SELECT DEPTNO FROM DEPT
MINUS
SELECT DEPTNO FROM EMP;

SELECT DEPTNO FROM EMP
MINUS
SELECT DEPTNO FROM DEPT;

SELECT EMPNO, ENAME, DEPTNO FROM EMP
MINUS
SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE DEPTNO = 20;

-- INTERSECT : 교집합
SELECT DEPTNO FROM EMP
INTERSECT
SELECT DEPTNO FROM DEPT;


-- SQL-99
SELECT *
FROM   EMP A NATURAL JOIN DEPT B
ORDER BY DEPTNO, A.EMPNO;
--
SELECT A.*, B.*
FROM   EMP A NATURAL JOIN DEPT B
ORDER BY DEPTNO, A.EMPNO;
--
SELECT A.EMPNO, A.ENAME, DEPTNO, B.DNAME
FROM   EMP A NATURAL JOIN DEPT B
ORDER BY DEPTNO, A.EMPNO;

SELECT *
FROM   EMP A JOIN DEPT B USING(DEPTNO)
ORDER BY DEPTNO, A.EMPNO;
--
SELECT A.*, B.*
FROM   EMP A JOIN DEPT B USING(DEPTNO)
ORDER BY DEPTNO, A.EMPNO;
--
SELECT A.EMPNO, A.ENAME, DEPTNO, B.DNAME
FROM   EMP A JOIN DEPT B USING(DEPTNO)
ORDER BY DEPTNO, A.EMPNO;


SELECT *
FROM   EMP A, DEPT B
WHERE  A.DEPTNO = B.DEPTNO;
SELECT A.*, B.*
FROM   EMP A, DEPT B
WHERE  A.DEPTNO = B.DEPTNO;


-- LEFT OUTER JOIN
SELECT A.DEPTNO, B.DEPTNO
FROM   DEPT A LEFT OUTER JOIN EMP B
ON     A.DEPTNO = B.DEPTNO;

-- RIGHT OUTER JOIN
SELECT A.DEPTNO, B.DEPTNO
FROM   EMP A RIGHT OUTER JOIN DEPT B
ON     A.DEPTNO = B.DEPTNO;

-- FULL OUTER JOIN
SELECT A.DEPTNO, B.DEPTNO
FROM   EMP A FULL OUTER JOIN DEPT B
ON     A.DEPTNO = B.DEPTNO;



-- 오라클 오브젝트

-- VIEW
--직접적인 테이블 접근을 제한하기 위해서 사용한다. 
--뷰는 테이블에 대한 제한을 가지고 
--테이블의 일정한 부분만 보일 수 있는 가상 테이블이다.

--CREATE [OR REPLACE][FORCE | NOFORCE] VIEW viewname
--[(alias, alias ....)]
--AS subquery
SELECT * FROM TAB;

CREATE TABLE EMP02
AS 
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP;

SELECT * FROM EMP02;
SHOW USER;
--CONN SYSTEM/1234
--GRANT CREATE VIEW TO SCOTT;

--단순 뷰 또는 복합 뷰에서 뷰는 조회 용으로만 사용하기 

-- 단순 뷰(Simple View) : 기본 테이블이 1개 일 때
-- ISUD 가능 
CREATE VIEW VIEW_EMP02
AS 
SELECT * 
FROM  EMP02
WHERE DEPTNO = 10;

SELECT * FROM VIEW_EMP02;

INSERT INTO VIEW_EMP02
VALUES (8000, 'ANGEL', 7000, 10);

SELECT * FROM EMP02;

COMMIT;

-- 복합 뷰(Complex View) : 기본 테이블이 2개 이상 일 때 
-- ISUD 불가능 
CREATE VIEW VIEW_EMP_DEPT
AS 
SELECT A.EMPNO, A.ENAME, A.SAL, B.DEPTNO, B.DNAME
FROM   EMP A, DEPT B
WHERE  A.DEPTNO = B.DEPTNO
AND    A.DEPTNO = 10;

SELECT * FROM VIEW_EMP_DEPT;

INSERT INTO VIEW_EMP_DEPT
VALUES (8001, 'AAAA', 4000, 10, 'ACCUNT');

-- 뷰 생성시 컬럼명을 조정할 수 있다. 
CREATE OR REPLACE VIEW VIEW_EMP02_COL(사원번호, 사원명, 급여, 부서번호)
AS 
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM   EMP02;

SELECT * FROM VIEW_EMP02_COL;

SELECT * FROM VIEW_EMP02_COL WHERE 부서번호 = 10;
SELECT * FROM VIEW_EMP02_COL WHERE DEPTNO = 10;

-- 뷰를 새로 만든 것 
CREATE OR REPLACE VIEW VIEW_EMP02_COL_1
AS 
SELECT EMPNO AS E_1, ENAME AS E_2, SAL AS E_3, DEPTNO AS E_4
FROM   EMP02;

SELECT * FROM VIEW_EMP02_COL_1;

-- 뷰를 변경하는 것 
CREATE OR REPLACE VIEW VIEW_EMP02_COL
AS 
SELECT EMPNO T_1, ENAME T_2, SAL T_3, DEPTNO T_4
FROM   EMP02;

SELECT * FROM VIEW_EMP02_COL;

-- NOFORCE : DEFAULT : 기본테이블이 없으면 뷰를 생성하지 않음 
CREATE OR REPLACE VIEW VIEW_EMP02_1
AS 
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM   EMP02_NOTABLE
WHERE  ROWNUM <= 3;

-- FORCE : 기본 테이블이 없어도 USER_VIEWS 테이터 사전에 뷰를 생성한다.
CREATE OR REPLACE FORCE VIEW VIEW_EMP02_2
AS 
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM   EMP02_NOTABLE
WHERE  ROWNUM <= 3;
--00942. 00000 -  "table or view does not exist"
--*Cause:    
--*Action:
--경고: 컴파일 오류와 함께 뷰가 생성되었습니다.

-- WITH CHECK OPTION
CREATE OR REPLACE VIEW VIEW_EMP03
AS 
SELECT EMPNO, ENAME, DEPTNO, JOB
FROM   EMP
WHERE  JOB LIKE 'MANAGER' WITH CHECK OPTION;

INSERT INTO VIEW_EMP03
VALUES (9000, 'ABC', 30, 'SALESMAN');

INSERT INTO VIEW_EMP03
VALUES (9000, 'ABC', 30, 'MANAGER');

SELECT * FROM VIEW_EMP03;
ROLLBACK;

-- WITH READ ONLY : 읽기만 가능 
-- 대부분의 뷰는 리드온리로 생성할 것 
CREATE OR REPLACE VIEW VIEW_EMP04
AS 
SELECT EMPNO, ENAME, DEPTNO, JOB
FROM   EMP
WHERE  JOB LIKE 'MANAGER' WITH READ ONLY;

INSERT INTO VIEW_EMP04
VALUES (9000, 'ABC', 30, 'MANAGER');








